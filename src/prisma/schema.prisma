// yarn prisma db push --schema=./src/prisma/schema.prisma
generator client {
    provider = "prisma-client-js"
    //previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    //referentialIntegrity = "prisma"
}

model Link {
    hash       String    @id
    origin_uri String
    price      Decimal
    creatorId  String
    creator    User      @relation(fields: [creatorId], references: [id])
    payments   Payment[]
    metadata   Metadata?

    @@index([hash, origin_uri])
}

model Metadata {
    linkHash     String  @id
    link         Link    @relation(fields: [linkHash], references: [hash])
    title        String
    description  String
    previewImage String
    embed        String? @db.MediumText
}

enum PaymentIntent {
    CAPTURE
    AUTHORIZE
}

enum PaymentStatus {
    CREATED
    COMPLETED
}

enum PaymentProvider {
    PAYPAL
}

model Payment {
    id            String          @id @default(uuid())
    link_hash     String
    userId        String?
    provider      PaymentProvider @default(PAYPAL)
    paymentRef    String          @unique
    paymentIntent PaymentIntent   @default(CAPTURE)
    paymentStatus PaymentStatus?
    initiatedAt   DateTime        @default(now())
    paidAt        DateTime?

    user User? @relation(fields: [userId], references: [id])
    link Link  @relation(fields: [link_hash], references: [hash])

    @@index([paymentRef])
    @@index([link_hash, userId])
}

model Account {
    id                 String  @id @default(cuid())
    userId             String
    type               String
    provider           String
    providerAccountId  String
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String?
    oauth_token_secret String?
    oauth_token        String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    links         Link[]
    payments      Payment[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
