// yarn prisma db push --schema=./src/prisma/schema.prisma
// add referential integrity when using prisma db push to planetscale (cant handle fks)
// remove it when deploying the app (app thinks it can handle fks)

generator client {
    provider = "prisma-client-js"
    //previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    //referentialIntegrity = "prisma"
}

enum SaleStatus {
    ON_SALE
    PAUSED
}

model Link {
    hash       String     @id
    originUri  String     @map("origin_uri")
    price      Decimal
    creatorId  String     @map("creator_id")
    creator    User       @relation(fields: [creatorId], references: [id])
    payments   Payment[]
    metadata   Metadata?
    saleStatus SaleStatus @default(ON_SALE) @map("sale_status")

    @@index([hash, originUri])
    @@index([creatorId])
}

model Metadata {
    linkHash     String  @id @map("link_hash")
    link         Link    @relation(fields: [linkHash], references: [hash])
    title        String
    description  String  @db.LongText
    previewImage String  @map("preview_image") @db.MediumText
    embed        String? @db.MediumText

    @@index([linkHash])
}

enum PaymentIntent {
    CAPTURE
    AUTHORIZE
}

enum PaymentStatus {
    CREATED
    COMPLETED
}

enum PaymentProvider {
    PAYPAL
}

model Payment {
    id            String          @id @default(uuid())
    linkHash      String          @map("link_hash")
    userId        String?         @map("user_id")
    provider      PaymentProvider @default(PAYPAL)
    paymentRef    String          @unique @map("payment_ref")
    paymentIntent PaymentIntent   @default(CAPTURE) @map("payment_intent")
    paymentStatus PaymentStatus?  @map("payment_status")
    initiatedAt   DateTime        @default(now()) @map("initiated_at")
    paidAt        DateTime?       @map("paid_at")

    user User? @relation(fields: [userId], references: [id])
    link Link  @relation(fields: [linkHash], references: [hash])

    @@index([paymentRef])
    @@index([linkHash, userId])
}

model SellerAccount {
    id                 String  @id @default(cuid())
    userId             String  @unique @map("user_id")
    merchantIdInPayPal String  @map("merchant_id_in_paypal")
    permissionsGranted Boolean @map("permissions_granted")
    accountStatus      String? @map("account_status")
    consentStatus      Boolean @map("consent_status")
    productIntentId    String  @map("product_intent_id")
    isEmailConfirmed   Boolean @map("is_email_confirmed")
    riskStatus         String? @map("risk_status")
    user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Account {
    id                 String  @id @default(cuid())
    userId             String  @map("user_id")
    type               String
    provider           String
    providerAccountId  String  @map("provider_account_id")
    refresh_token      String? @db.Text
    access_token       String? @db.Text
    expires_at         Int?
    token_type         String?
    scope              String?
    id_token           String? @db.Text
    session_state      String? @db.Text
    oauth_token_secret String?
    oauth_token        String?
    user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]

    links         Link[]
    payments      Payment[]
    sellerAccount SellerAccount?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
